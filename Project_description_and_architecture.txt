1)Getting started with the project.
       ->Section 1-Intro(Done)
       ->Course Goals-Backend with django.
	      -Rest API
	      -Customisation of django
	      -Frontend with react
       ->Creating a project structure from client requirements.
  	 I Want to sell t-shirts online.I got t-shirts for winter and summer.(There should be seperate login for admin and customer)
       ->How to handle such projects.
       ->Django and Django rest framework.


2)Installation of backend.
	->Section 2 Intro.
	->Python installation and virtual environment.x
	->Python installation and virtual env in windows.
	->Learn to manage virtual env.x
	->Django installation.                                     pip install django,django-admin startproject ecom,python manage.py runserver
	->Django installation in windows.
	->Django tour.
	->Django admin and migration.                              python manage.py makemigrations,python manage.py migrate,python manage.py createsuperuser.


3)Getting Structure Ready.
	->Section 3 Intro.
	->Where are code files.
	->Cross origin request in django.     			  Its actually needed when we send multiple request from different resources such as postman and react.
								  1-pip install django-cors-headers.
								  2-In settings.py there will be couple of changes for cors-headers.
								  3-INSTALLED_APPS = [,'corsheaders']

								  MIDDLEWARE = ["corsheaders.middleware.CorsMiddleware","django.middleware.common.CommonMiddleware",]
									
								  STATIC_URL = '/static/'

								  CORS_ORIGIN_ALLOW_ALL = True

								  ALLOWED_HOSTS = ['*']

	->Django REST Framework installation.			  1-pip install djangorestframework.
								  2-INSTALLED_APPS = ['rest_framework','rest_framework.authtoken']----authtoken for making custom signup.We dont want to use django sign up.	 
								  3-REST_FRAMEWORK = {# Use Django's standard `django.contrib.auth` permissions,
										    # or allow read-only access for unauthenticated users.
										    'DEFAULT_PERMISSION_CLASSES': [
     										    	'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
   										    	]
										   } 

								  4-then go to the api guide-authentication-copy setting the authentication schema in REST_FRAMEWORK in settings.py.
									'DEFAULT_AUTHENTICATION_CLASSES': [
        												'rest_framework.authentication.BasicAuthentication',
        												'rest_framework.authentication.SessionAuthentication',
													'rest_framework.authentication.TokenAuthentication'
    													],


								  5-in urls.py copy==   path('api-auth/', include('rest_framework.urls'))
	
	->Storing our images in Django.
								  1-First we will create a media folder,then in settings.py
								    MEDIA_URL = '/media/'
								    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
								  2-Then we have to mention it in urls as well.
								    from django.conf.urls.static import static
								    from django.conf import settings

								    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)    (Thats how we store media files,rest all will be handled by django itself.)



	->Setting Django API structure.
								  1-Create an app called api.(python manage.py startapp api)Now inside the api we will create order,products,categories,payment and users.
									Create all apps i.e order,payment,product,category,user inside api app.
									django-admin startapp order
									django-admin startapp product
									django-admin startapp payment
									django-admin startapp category
									django-admin startapp user
	->Handling api root route in django.
								1-In ecom settings.py mention the app name api in installed app.
								2-In ecom urls.py create path = path('api/', include('api.urls'))
								3-Create urls.py file in api app 
									
									from django.urls import path,include
									from rest_framework.authtoken import views
									from .views import home

									urlpatterns = [
   											 path('',home, name='api.home')
										]
								4-In views.py created a simple view.
									from django.http import JsonResponse

									# Create your views here.
									def home(request):
    									return JsonResponse({'info':'Django React','name':'Kalpit'})


4)Setting up categories in admin.
	->Section 4 Intro.
	->Setting up category model and admin.
								1-Create model
								2-Register in admin
								3-serializers.py file to serialize data in json
								4-views to get all category
								5-setup url
									
								6-In category app create serializers.py and urls.py file.
								7-Now we will work with the models.
										from django.db import models

										class Category(models.Model):
   											name = models.CharField(max_length=50)
    											description = models.CharField(max_length=250)
    											created_at = models.DateTimeField(auto_now_add=True)
    											updated_at = models.DateTimeField(auto_now=True)

								8-Now in admin we have to register the category in admin pannel.
									from django.contrib import admin
									from .models import Category

									admin.site.register(Category)
	

	->Serialize the data from db in django.
								serializers.py->
									from rest_framework import serializers
									from .models import Category

									class CategorySerializer(serializers.Serializer):
    									class Meta:
        									model = Category
        									fields = ['name','description']
	

	->Category API routing and views in django.
								In this we are going to work with viewsets and routers from django rest framework.
								In category/views.py
								      ->from rest_framework import viewsets
									from .serializers import CategorySerializer
									from .models import Category
									# Create your views here.

									class CategoryViewSet(viewsets.ModelViewSet):
    										queryset = Category.objects.all().order_by('name')
    										serializer_class = CategorySerializer
								In api/urls.py
									->from django.urls import path,include
									from rest_framework.authtoken import views
									from .views import home

									urlpatterns = [
    										path('',home, name='api.home'),
    										path('category/', include('api.category.urls'))
									]	


								In category/urls.py
									->from rest_framework import routers
									from django.urls import path,include
									from .import views


									router = routers.DefaultRouter()
									router.register(r'', views.CategoryViewSet)

									urlpatterns = [
   	 									path('', include(router.urls))
    
										]
	->Testing with postman for category in django.

								Now in serializers.py
									from rest_framework import serializers
									from .models import Category

									class CategorySerializer(serializers.HyperlinkedModelSerializer):       ------------->we use HyperlinkedModelSerializer and then test in postman get request localhost://8000/api/category
    										class Meta:
        										model = Category
        										fields = ['name','description']



5)Setting up products in admin.
	->Section 5 intro 					->In this section every product will needs to be registered in the categories.
								->In the products we will be adding the images.
	

	->Add model for product in django.			1-Create model
								2-Register in admin
								3-serializers.py file to serialize data in json
								4-views to get all category
								5-setup url

								1-Creating Model-
									from distutils.command.upload import upload
									from django.db import models
									from api.category.models import Category
									# Create your models here.

									class Product(models.Model):
    										name = models.CharField(max_length=50)
    										description = models.CharField(max_length=250)
    										price = models.CharField(max_length=50)
    										stock = models.CharField(max_length=50)
    										is_active = models.BooleanField(default=True, blank=True)
    										image = models.ImageField(upload_to='images/',blank=True, null=True)
    										category = models.ForeignKey(Category, on_delete=models.SET_NULL, blank=true, null=True)
    										created_at = models.DateTimeField(auto_now_add=True)
    										updated_at = models.DateTimeField(auto_now=True)

    										def __str__(self):
        										return self.name
								2-Register in admin-
									from django.contrib import admin
									from .models import Product

									# Register your models here.

									admin.site.register(Product)                     ------------->>>>>>>>>>>>>>>>>>>>>>>makemigrations,migrate


									Now add products in admin pannel
	
	
	->Image serialization and product views in django	3-serializers.py file to serialize data in json

									from itertools import product
									from rest_framework import serializers

									from.models import Product

									class ProductSerializer(serializers.HyperlinkedModelSerializer):
    										image = serializers.ImageField(max_length=None,allow_empty_files=False, allow_null=True, required=False)
   		 								class Meta:
        										model = Product
        										fields = ('id','name','description','price','image','category')

									
								4-views to get all category
									from django.shortcuts import render
									from rest_framework import viewsets
									from .serializers import ProductSerializer
									from.models import Product

									# Create your views here.

									class ProductViewSet(viewsets.ModelViewset):
    										queryset = Product.objects.all().order_by('id')
    										serializer_class = ProductSerializer

	->Setting Up URL for products in django.
								1.In api.urls.py->     path('product/',include('api.product.urls'))
								2.In product.urls.py   
										from rest_framework import routers
										from django.urls import path,include
										from .import views


										router = routers.DefaultRouter()
										router.register(r'', views.ProductViewSet)

										urlpatterns = [
    											path('', include(router.urls))  
										]

6)Setting Up custom user in admin.
	->Section 6 Intro.					you will be modifying what input are been taken up while signing up the user. 

	->Create User model in admin in django.			1-Create model based on Existing model.
								2-Serialize,View and urls
								3-Register the app in admin
								4-Debug it
								

								
								1-Create model based on Existing model:->
									from django.db import models
									from django.contrib.auth.models import AbstractUser

									class CustomUser(AbstractUser):
    										name = models.CharField(max_length=50,default='Anonymous')
    										email = models.EmailField(max_length=254, unique=True)

   									 	username = None

    										USERNAME_FIELD = 'email'
    										REQUIRED_FIELDS = []

    										phone = models.CharField(max_length=20, blank=True, null=True)
    										gender = models.CharField(max_length=10, blank=True, null=True)

    										session_token = models.CharField(max_length=10,default=0)

    										created_at = models.DateTimeField(auto_now_add=True)
    										updated_at = models.DateTimeField(auto_now=True)

	->Lets get some errors intentionally in django.(Revision needed)

	->Custom user Serialization in django.(Revision needed)	
								2-user/serializers.py->
									from rest_framework import serializers
									from django.contrib.auth.hashers import make_password
									from rest_framework.decorators import authication_classes, permission_classes

									from .models import CustomUser

									class UserSerializer(serializers.HyperlinkedModelSerializer):

    										def create(self, validated_data):
        										password = validated_data.pop('password', None)
        										instance = self.Meta.model(**validated_data)

        										if password is not None:
            											instance.set_password(password)
        										instance.save()
        										return instance

    										def update(self, instance, validated_data):
        										for attr, value in validated_data.items():
            											if attr =='password':
                											instance.set_password(value)
           	 										else:
                											setattr(instance,attr,value)
        											instance.save()
        											return instance



    									class Meta:
										model= CustomUser
        									extra_kwargs = {'password':{'write_only':True}}
        									fields= ('name','email','password','phone','gender','is_active','is_staff','is_superuser')
        						
	
	->Generating the token in django
								We are gonna generate a token based on custom logic.And as long as the token is active in the database for that user we are gonna consider user is logged in.
								And user hits the route sign out that means we are gonna delete the token from the backend that means user is logged out.
								in users/views.py-
									from django.shortcuts import render
									import random
									# Create your views here.

									def generate_session_token(length=10):
    										return ''.join(random.SystemRandom().choice([chr(i) for i in range(97,123)] + [str(i) for i in range(10)])for _ in range(length)) 
									#we are using this to generate random token run this command in python shell.first import random.
	->Custom user signin in django.
								We are using regexr.com

		

	